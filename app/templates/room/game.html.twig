 
 
 <style>
body,html
{
    height: 100%;
    width: 100%;
}
.table>:not(caption)>*>*
{

    background-color:initial !important;
}
 
 body {
    background-color: #293a51 !important;
    
    height:97%;
    display: flex;
flex-direction: column;
justify-content: center;
}
 .box1
 {
position: absolute;
height: 50% !important;
width: 70%;
background-color: blanchedalmond;
align-self: center;
z-index: 1;
display: flex;

 }
 .box2
 {
    align-self: center;
padding: 10px;
padding-bottom: 0px;
height: 99%;
background-color: #2a3c60;
display: flex;
flex-direction: column;
border-radius: 20px;
justify-content: center;
margin-top: 1%;
width: 90%;


 }
 .table {
    height: 70%;
    min-height: 42%;
    display: flex;
    justify-content: center;
    flex-direction: row;
 }
 .box3
 {
zoom: 120%;
padding-left:10%;
padding-right:10%;
display: flex;
justify-content: center;
gap: 40px;
}
body{
    zoom:87%;
}
.card
    {
        min-width: 5%;
        min-height:100px

    }



    .card.disabled {
    background-color: #f0f0f0;
    cursor: not-allowed;
}

.card {
    position: relative;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    width: 70px;
    background-color:none;
}
.card img
{
}

.card .card-count {
    position: absolute;
    top: 5px;
    left: 5px;
    background-color: rgba(84, 242, 113, 0.7);
    color: white;
    padding: 2px 5px;
    border-radius: 3px;
    font-size: 20px;
}

.card.disabled {
    background-color: #f0f0f0;
    cursor: not-allowed;
    opacity: 0.5;
}

.done-button {
    background-color: #28a745; /* A vibrant green color */
    color: white;              /* White text for contrast */
    padding: 10px 20px;        /* Comfortable padding */
    font-size: 16px;           /* Easy-to-read text size */
    border: none;              /* Remove default border */
    border-radius: 8px;        /* Rounded corners for a modern look */
    cursor: pointer;           /* Pointer cursor to indicate interactivity */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
    transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth transition for hover effects */
}

.done-button:hover {
    background-color: #218838; /* Slightly darker green on hover */
    transform: translateY(-2px); /* Lift the button up slightly on hover */
}

.done-button:active {
    background-color: #1e7e34; /* Darker green when clicked */
    transform: translateY(0);   /* Reset the lift effect on click */
}

.done-button:disabled {
    background-color: #6c757d; /* Gray out the button when disabled */
    cursor: not-allowed;       /* Change cursor to indicate non-interactivity */
    opacity: 0.65;             /* Reduce opacity for disabled state */
}
.content
{
    padding: 1%;
   height: 400px;
  width: 80%;
  background-color: #2d4366;
  align-self: center;
  border-radius: 40%;
  border: 30px solid #3d577f;
  display: flex;
  
}
.containertable
{
    padding: 20px;
    gap: 2%;
    display: flex;
    flex-direction: row;
    display: flex;
    flex-wrap: wrap;
    gap: 4%; /* or whatever spacing you need */
}
.button-put
{position: absolute;
    width: 100px;
    height: 50px;
    background-color: #9cd561;
    bottom: 35%;
    left: 11%;
    rotate: 10%;
    transition: transform 0.5s ease;  /* Smooth transition for transform */
    transform: rotate(20deg);  /* Rotate the div by 45 degrees */
    border-radius:10px;

}
.cardtable
{
    margin:10px;
    margin-top:40px;
}
.cardtable img 

{

box-shadow:0px 0px 3px black !important;
    height: 80px;
    width: 60px;
    margin: 10px;
  border-radius: 5px;


}
.button-lier
{
    position: absolute;
    width: 100px;
    height: 50px;
    background-color: #fb757c;
    bottom: 32%;
    right: 12%;
    rotate: 9%;
    transition: transform 0.5s ease;  /* Smooth transition for transform */
    transform: rotate(140deg);  /* Rotate the div by 45 degrees */
    border-radius:10px;

}
.avatar
{
    height: 70px;
  border-radius: 100%;
  align-self: center;
  background-color: #2a3c60 !important;
  width: 70px;
  margin: 5px;
  display: none;
 /* border: 2px solid aliceblue;*/
  z-index: 99999999999;

}
.avatar img
{

    height: inherit;
  border: 100%;
  border-radius: 100%;
  width: inherit;
}
.highlight-transition {
    animation: upDown 0.5s ease-in-out infinite alternate;
   /* border: 5px solid green; /* Optional: Add the border if you want */
}

@keyframes upDown {
    0% {
        transform: translateY(0);
    }
    100% {
        transform: translateY(-10px);
    }
}

.cardtable
{
    height: 0px;
    width: 10px;
    background-color: #2d4366 !important;
  

}

.avatar img {
    height: inherit;
    width: inherit;
    border-radius: 100%;
    display: block; /* Ensures there's no extra spacing around the image */
    margin: 0;      /* Removes any default margin */
    padding: 0;     /* Removes any default padding */
    border: none;   /* Ensures no border is applied unless explicitly defined */
}

.avatar {
    height: 70px;
    border-radius: 100%;
    align-self: center;
 background-color:#2a3c60 !important;
; /* Background color could be causing the issue */
    margin: 5px;
    display: none;
    /*border: 2px solid aliceblue;*/
    /*overflow: hidden; /* Ensures image doesn't overflow the container */
    color :white;
    position:relative;

}
 img {
    background-color: transparent !important;
    box-shadow: none !important;
}

img {
    background-color: transparent !important;
    box-shadow: none !important;
}
.box1 {

    position: absolute;
    top: 19%;
    width: 70%;
    background-color: rgb(23, 163, 182);
    align-self: center;
    z-index: 1;
    display: flex;
    flex-wrap: wrap; /* Allows divs to wrap within the box */
    justify-content: space-around; /* Spaces out the cards evenly */
    padding: 20px;
    box-shadow: 10 4px 8px rgba(41, 13, 120, 0.2); /* Add shadow for better visuals */
    border-radius: 10px;

}

.cardchoice {
    width: 50px;
    height: 100px;
    background-color: #f0f0f0;
    border: 2px solid #333;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    transition: transform 0.2s, background-color 0.2s;
}

.cardchoice:hover {
    transform: scale(1.05); /* Slightly enlarge on hover */
    background-color: #e0e0e0;
}
.happy
{
    position: absolute;
    height: 25%;
    width: 25%;
    z-index: 999999999999;
}
.angry
{
    top: 30%;
    position: absolute;
    height: 14%;
    width: 12%;
    z-index: 999999999999;

}
.angry-box {
    width: 100px;
    height: 100px;
    background-color: red;
    animation: angry-animation 3s ease-in-out;
}



/* Angry animation keyframes */
@keyframes angry-animation {
    0% {
        background-color: red;
        transform: scale(1);
        box-shadow: 0 0 10px red;
    }
    25% {
        transform: scale(1.2) rotate(5deg);
        box-shadow: 0 0 20px red;
    }
    50% {
        transform: scale(1.3) rotate(-5deg);
        box-shadow: 0 0 30px red;
    }
    75% {
        transform: scale(1.2) rotate(5deg);
        box-shadow: 0 0 20px red;
    }
    100% {
        background-color: red;
        transform: scale(1);
        box-shadow: 0 0 10px red;
    }
}
/* For portrait orientation, apply a transformation to rotate the content */
@media only screen and (orientation: portrait) {
    body {
        transform: rotate(-90deg);
        transform-origin: left top;
        width: 100vh; /* height of the viewport as width */
        height: 100vw; /* width of the viewport as height */
        overflow-x: hidden;
        position: absolute;
        top: 100%;
        left: 0;
    }
    .card
    {
        width:10px !important;
    }
}


   .card
    {
        width:50px !important;
    }


 .win-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .win-message {
      background: linear-gradient(45deg, #FFD700, #FFA500);
      padding: 2rem 4rem;
      border-radius: 1rem;
      text-align: center;
      animation: scaleIn 0.5s ease-out;
      box-shadow: 0 0 20px rgba(0,0,0,0.2);
    }

    .win-text {
      font-size: 3rem;
      color: white;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
      margin: 0;
    }

    .confetti {
      position: absolute;
      width: 10px;
      height: 10px;
      background-color: #f00;
      animation: confettiRain 3s ease-out forwards;
    }

    @keyframes scaleIn {
      0% {
        transform: scale(0);
        opacity: 0;
      }
      80% {
        transform: scale(1.1);
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }

    @keyframes confettiRain {
      0% {
        transform: translateY(-100%) rotate(0deg);
        opacity: 1;
      }
      100% {
        transform: translateY(100vh) rotate(360deg);
        opacity: 0;
      }
    }

    .show {
      display: flex !important;
    }


  .bottle {
      width: 100px;
      height: 140px;
      position: absolute;
      margin-left: 50px;
      right:5px;
      top:100px;
    }

    .bottle-shape {
      width: 100%;
      height: 100%;
      background: transparent;
      border: 3px solid white;
      border-radius: 10px 10px 50% 50%;
      position: relative;
      overflow: hidden;
    }

    .water {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      background: rgba(33, 150, 243, 0.3);
      transition: height 0.5s ease-out;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      gap: 10px;
      padding-top: 10px;
    }
    .selected-number {
      font-size: 24px;
      color: #1565C0;
      font-weight: bold;
      text-shadow: 1px 1px 1px rgba(255, 255, 255, 0.5);
      animation: bobbing 2s infinite ease-in-out;
    }

    @keyframes bobbing {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-3px); }
    }

    .reset-btn {
      margin-top: 20px;
      padding: 10px 20px;
      background: #ff6b6b;
      border: none;
      border-radius: 5px;
      color: white;
      cursor: pointer;
      font-size: 16px;
    }

    .reset-btn:hover {
      background: #ff5252;
    }


 </style>
     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<meta name="viewport" content="width=device-width, initial-scale=0.6, maximum-scale=1, user-scalable=no, orientation=landscape">



<!--<h3> is a winner ::{{player.winner}}</h3>

     {% for playerty in players %}
     {{player.id }}
     {% endfor %}
-->
<!-- Win container -->
  <div class="win-container" id="winEffect">
    <div class="win-message">
      <h1 class="win-text">YOU WIN! 🎉</h1>
    </div>
  </div>

  <!-- Demo button -->


<audio id="myAudio" src="{{asset('images/put.mp3')}}"></audio>
<audio id="win-round" src="{{asset('images/win-round.mp3')}}"></audio>
<audio id="lose-round" src="{{asset('images/lose-round.mp3')}}"></audio>
  <!-- slected card buttols -->
          <button class="reset-btn" id="resetBtn">Reset Selection</button>

<div class="bottle">

      <div class="bottle-shape">
        <div class="water">
          <!-- Selected numbers will appear here -->
        </div>
      </div>
    </div>


  <!-- end slected card buttols -->

<div class="box1 box" id="box1">
    <div class="cardchoice" data-value="1">1</div>
    <div class="cardchoice" data-value="2">2</div>
    <div class="cardchoice" data-value="3">3</div>
    <div class="cardchoice" data-value="4">4</div>
    <div class="cardchoice" data-value="5">5</div>
    <div class="cardchoice" data-value="6">6</div>
    <div class="cardchoice" data-value="7">7</div>
    <div class="cardchoice" data-value="8">8</div>
    <div class="cardchoice" data-value="9">9</div>
    <div class="cardchoice" data-value="10">10</div>

</div>

<div class="box2 box ">

    <div class="avatar"></div>

<div class="table" id="table">





    {% if state == 1 and ready %}


<div id="containerbutton"> 

<div class="button-put" id="put" onclick="put()"> <h6>put cards</h6></div>
</div>
             

{% if first == false and earn == false %}
<div id="containerbutton"> 

<div class="button-lier" id="button-lier" onclick="fetchLieData({{player.id}})"></div>
</div> 
{% endif %}
{% else %}


 {% endif %}
 {% if lie  and ok==false and ready and roundBlocked==false %}
<!--
<div class="button-lier" id="button-lier" onclick="fetchLieData({{player.id}})"></div>
-->
{% endif %}
<div class="avatar">

</div>
<h1>{{table}}</h1>
    <div class="content" id="content">
        <div class="container containertable" id="containerscard">
            {% if table >0 %}

            {% for i in 1..table %}


            <div class="cardtable">
                <img src="{{asset('images/lie.jpg')}}"  height="100">
            </div>
            
          {% endfor %}
          {%endif %}

        </div>
       

        
    </div>
    <div class="avatar"></div>

    <h3 id="goalup">{{goal}}</h3>
    </div>


   
    <div class="box3 box" id="box3">
    


    </div>
   


  


</div>
 
           


<script>





    const water = document.querySelector('.water');


function updateBottle() {
      // Clear current numbers
      water.innerHTML = '';
      
      // Add selected numbers vertically
      Array.from(selectedCards).forEach(number => {
        const numberDiv = document.createElement('div');
        numberDiv.className = 'selected-number';
        numberDiv.textContent = number;
        water.appendChild(numberDiv);
      });

      // Update water level
      const fillLevel = (selectedCards.size / 2) * 100;
      water.style.height = `${fillLevel}%`;
    }
   var resetBtn = document.getElementById("resetBtn") ;


resetBtn.addEventListener('click', () => {
      // Return selected cards to cardList
      selectedCards.forEach(card => {
        const existingCard = cardList.find(item => item.card === card);
        if (existingCard) {
          existingCard.count++;
        } else {
          cardList.push({ card: card, count: 1 });
        }
      });
      
      // Sort cardList to maintain original order
      cardList.sort((a, b) => a.card - b.card);
      
      // Clear selected cards
      selectedCards.length = 0;
      
      updateBottle();

updateCardDisplay()
}) 

function updateCardDisplay() {
      const box = document.getElementById('box3');
box.innerHTML = '';
      // Iterate through the cardList array and create corresponding div elements
cardList.forEach(item => {
    // Create a new div element for each card
    const cardDiv = document.createElement("div");
    cardDiv.className = "card";
    cardDiv.setAttribute("data-card", item.card);

    // Set the background image using the card number
    cardDiv.style.backgroundImage = `url('/images/${item.card}.png')`;

    // Create a span element to show the card count
    const span = document.createElement("span");
    span.className = "card-count";
    span.innerText = item.count; // Display the occurrence count

    // Append the span to the card div
    cardDiv.appendChild(span);

    // Append the card div to the 'box3' div
    box.appendChild(cardDiv);
});
    }
   



//win effect functions 
 function showWinEffect() {
      const winContainer = document.getElementById('winEffect');
      winContainer.classList.add('show');
      
      // Create confetti
      for (let i = 0; i < 50; i++) {
        createConfetti();
      }
      
      // Remove effect after animation
      setTimeout(() => {
        winContainer.classList.remove('show');
        const confetti = document.querySelectorAll('.confetti');
        confetti.forEach(c => c.remove());
      }, 3000);
    }

    function createConfetti() {
      const confetti = document.createElement('div');
      confetti.className = 'confetti';
      
      // Random position
      confetti.style.left = Math.random() * 100 + 'vw';
      
      // Random color
      const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];
      confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
      
      document.body.appendChild(confetti);
      
      // Remove confetti element after animation
      confetti.addEventListener('animationend', () => {
        confetti.remove();
      });
    }
    //--------------------------------------------------



















//web sockett 2 
var dataTest;
var wsFirst = new WebSocket('ws://http://3.68.191.127:1700');

// WebSocket Connection Open
wsFirst.onopen = function() {
    console.log('Connected to WebSocket');
};
function removeSpaces(str) {
    return str.trim();
}
// WebSocket Message Handler
wsFirst.onmessage = async function(event) {
    try {
        console.log("Update received from WebSocket");

        // Parse the message once
        const data = JSON.parse(event.data);
        const { topic, data: messageData } = data;
        let topic1 = removeSpaces(topic);
        console.log("Topic received from server:" + topic1);

        switch (topic1) {
            case `/{{rommid}}/putdone`:
                handlePutDone(messageData);
                break;

            case `/{{rommid}}/ready`:
                console.log('Room is ready:', messageData);
                break;

            case '/win-loser-players-broadcast':
                handleWinLoserBroadcast(messageData);
                break;

            default:
            if(topic == "/win-loser-players-broadcast")
                {console.log('Unknown topic but handel: ', topic)
                handleWinLoserBroadcast(messageData);
                break;
                }
        }
    } catch (error) {
        console.error('Error parsing WebSocket message:', error);
    }
};

// Handle "putdone" messages
async function handlePutDone(data) {
    try {
        const { currentroundplayer, nextplayer, cardnumber } = data;
        console.log("Put done update: ", data);

        // Update player animations
        /*updatePlayerAnimation(currentroundplayer, nextplayer);*/
        //desactivate any animations on the entire page aboout the ciurrent playuer action 

        // Get all elements with the class name 'avatar'
            var avatarElements = document.getElementsByClassName('avatar');

            // Iterate through each element and remove the 'highlight-transition' class if it exists
            for (var i = 0; i < avatarElements.length; i++) {
                if (avatarElements[i].classList.contains('highlight-transition')) {
                    avatarElements[i].classList.remove('highlight-transition');
                }
            }
        //search and move next player icon 
        
        var animatedRoundPlayer = document.getElementById(nextplayer);
        console.log("the active div is "+animatedRoundPlayer);
        if(animatedRoundPlayer)
        {
            console.log("the player with id ",nextplayer,"should be animated");

            animatedRoundPlayer.classList.add("highlight-transition");

        }


        
        //




        // Do other updates or UI changes based on data
        if (nextplayer === {{ player.id }} && winstate !== 1) {
            const turn = document.getElementById("content");
            if (turn) {
                turn.style.border = "30px solid #75b798";
            }
            createButton('table', 'button-lier', 'button-lier', `fetchLieData({{ player.id }})`, '');
            if (nextplayer === {{ player.id }}) {
                console.log("Your turn to play, mister " + nextplayer);
                createButton('table', 'button-put', 'put', 'put()', 'Put cards');
            }
        }
    } catch (error) {
        console.error("Failed to process 'putdone' event:", error);
    }
}

// Handle "win-loser-players-broadcast" messages
function handleWinLoserBroadcast(data) {
    try {
        const wrongUserId = data["wrong"];
        console.log('Hello message:', wrongUserId);

        const wrongUserElement = document.getElementById(wrongUserId);
        if (wrongUserElement) {
            wrongUserElement.classList.add('angry-box');
            setTimeout(() => {
                wrongUserElement.classList.remove('angry-box');
            }, 3000);
        }
    } catch (error) {
        console.error("Failed to process 'win-loser-players-broadcast' event:", error);
    }
}

// Update player animation
function updatePlayerAnimation(currentPlayer, activePlayer) {
    if (activePlayer !== playerId) {
        const other = document.getElementById(activePlayer);
        if (other) {
            other.classList.add("highlight-transition");
            perviousplayer = activePlayer;
        }
    } else {
        if (perviousplayer !== 0) {
            const div = document.getElementById(perviousplayer);
            if (div) {
                div.classList.remove("highlight-transition");
            }
        }
    }
}


/*wsFirst.onclose = function() {
    console.log('Disconnected from WebSocket');
};
    
*/

var currentPlayer;


{% if state == 1 and ready %}
var dataTest;





//update from thr websocket 


var wsFirst = new WebSocket('ws://http://3.68.191.127:1700');

wsFirst.onopen = function() {
    console.log('Connected to WebSocket');
};
var dataG;
wsFirst.onmessage = function(event) {
    try{
            console.log("update send from web socket yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy")
    
    data=JSON.parse(event.data);
    topic=data.topic
    dataG=JSON.parse(event.data);


    
        console.log("Topic received from server:" + topic);

    switch (topic) {
    
            case "/{{rommid }}/putdone":
                console.log('put done update from websocket:', data.data);
                handlePutDone(data.data)

 try {

        var data = JSON.parse(event.data);
        data=data.data;
         currentPlayer = data.currentroundplayer;
        const activePlayer = data.nextplayer;
        console.log("the other player Id is "+activePlayer);
            actif=activePlayer;
        var cardnumberP=data.cardnumber;

    //this is the bug found 
        if (currentPlayer !== {{ player.id }} && winstate != 1 && activePlayer=={{ player.id }}) {
        var turn = document.getElementById("content");
        turn.style.border="30px solid #75b798";   

            createButton('table', 'button-lier', 'button-lier', `fetchLieData({{ player.id }})`, '');
                if (activePlayer === {{ player.id }} ) {
                    console.log("Your turn to play, mister " + activePlayer);
                    createButton('table', 'button-put', 'put', 'put()', 'Put cards');
                }
          
        }
    } catch (error) {
        console.error("Failed to process 'putdone' event:", error);
    }

          break;
            case "/{{rommid }}/ready":
                console.log('Room is ready:', data.data);
                break;
            case '/win-loser-players-broadcast':
                console.log('Hello message:', data.data);
                handleWinLoserBroadcast(data.data);
                break;

                break;
            default:
                console.log('Unknown topic:', topic);
        }
    } catch (e) {
        console.error('Error parsing WebSocket message:', e);
    }



};

wsFirst.onclose = function() {
    console.log('Disconnected from WebSocket');
};
    






  
var turn = document.getElementById("content");
 turn.style.border="30px solid #75b798";   


 {% endif %}
function displayImage() {
    // Create a new image element
    const img = document.createElement('img');
    img.src = '/images/happy.gif'; // Replace with your image path
    img.alt = 'Temporary Image';
    img.height = 100; // Set the desired height
    img.className = "happy"    // Append the image to the container
    const container = document.getElementById('table');
    container.appendChild(img);

    // Set a timeout to remove the image after 4 seconds (4000 milliseconds)
    setTimeout(() => {
        container.removeChild(img);
    }, 4000);
}
function displayImageangry() {
    // Create a new image element
    const img = document.createElement('img');
    img.src = '/images/angry.gif'; // Replace with your image path
    img.alt = 'Temporary Image';
    img.height = 100; // Set the desired height
    img.className = "angry"    // Append the image to the container
    const container = document.getElementById('table');
    container.appendChild(img);

    // Set a timeout to remove the image after 4 seconds (4000 milliseconds)
    setTimeout(() => {
        container.removeChild(img);
    }, 4000);
}


{%if ready%}

{% set j = 0 %}
{% set x = 0 %}

{% for playerty in players %}
    {% if playerty.id != player.id %}
        avatars = document.getElementsByClassName("avatar");
        avatars[{{ x }}].style.display = "block";
        
        // Add the image to the div
        avatars[{{ x }}].innerHTML = `<img src="{{ asset('images/' ~ (j + 1) ~ 'avatar.jpeg') }}" alt="Player Avatar">
        <p>player {{j+1}} </p>

        
        `;
        
        // Add the player's ID as an attribute
        avatars[{{ x }}].setAttribute("id", "{{ playerty.id }}");

            {% set x = x + 1 %}

    {% endif %}
    {% set j = j + 1 %}

{% endfor %}
//state updatte
{% for playerty in players %}

{% if playerty.state == 1 and ok and ready and playerty.id != player.id %}
        var element = document.getElementById("{{ playerty.id }}");
        if (element && !element.classList.contains("highlight-transition")) {
            element.classList.add("highlight-transition");
        }
{% else %}
        var element = document.getElementById("{{ playerty.id }}");
        if (element && element.classList.contains("highlight-transition")) {
            element.classList.remove("highlight-transition");
        }
{% endif %}

{% endfor %}


{% if first and player.state==1 and player.code=="181818" %}
console.log('Condition met: Showing box1 for the first round');
        document.addEventListener('DOMContentLoaded', function() {
            var t = document.getElementById('box1');
            t.style.display = "flex";
            
           
var turn = document.getElementById("content");
                     turn.style.border="30px solid #75b798";   
        });
   
{% else %}
  
        console.log('Condition not met for the first round ');
{% endif %}


{% if first == false and earn and player.state == 1 %}
    
        console.log('Condition met: Showing box1');
        document.addEventListener('DOMContentLoaded', function() {
            var t = document.getElementById('box1');
            t.style.display = "flex";
        });
   
{% else %}
  
        console.log('Condition not met');
{% endif %}











document.getElementsByClassName("avatar")

var playerId= {{player.id}};
goal=4;
actif=0;

function put()
{if (selectedCards.length==0)
    {return ;}
      if(actif!=0)
{
 
}
      water.innerHTML = '';


    //let containerButton = document.getElementById('containerButton').innerHTML="";
document.getElementById('containerbutton').innerHTML=""


    if (selectedCards.length==0)
    {return ;}
var all=document.getElementsByClassName("button-put");
var liertab=document.getElementsByClassName("button-lier");
if(liertab.length>0)
{
    
for(i =0;i<liertab.length;i++)
{
    liertab[i].remove();
}

}
if(all.length>0)
{
    for(i =0;i<all.length;i++)
{
for(i =0;i<all.length;i++)
{
    all[i].remove();
}
           }
}


    var putbutton=document.getElementById('button-lier');
           if( putbutton)
           {
            console.log("removing lier button")
            var all=document.getElementsByClassName("button-put");
for(i =0;i<all.length;i++)
{
    all[i].style.display="none";
}
            putbutton.style.display="none !important";
           }

            var turn = document.getElementById("content");
        turn.style.border="30px solid #3d577f";   

fetch(`/put/${playerId}/${goal}`, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
    },
    body: JSON.stringify({ cards: selectedCards })
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));
 playAudio()
selectedCards=[];







  var all=document.getElementsByClassName("button-lier");
                    if (all.length>0)
                    {
                        for(i =0;i<all.length;i++)
                {
                    all[i].remove();
                }
                        }






}









var cards = [];
{% for card in cards %}
    cards.push({{card.card}});
{% endfor %}

const cardCount = {};

// Count the occurrences of each card
cards.forEach(card => {
    if (card in cardCount) {
        cardCount[card]++;
    } else {
        cardCount[card] = 1;
    }
});

// Convert cardCount object into an array of objects
 cardList = Object.keys(cardCount).map(key => {
    return { card: parseInt(key), count: cardCount[key] };
});

// Select the box element where cards will be injected
const box = document.getElementById('box3');

// Ensure the box element exists
if (box) {
    // Generate and inject card elements into the box
    cardList.forEach(item => {
        const cardDiv = document.createElement('div');
        cardDiv.classList.add('card');
        cardDiv.dataset.card = item.card;  // Store card number in data attribute

        // Set the background image for the card
        cardDiv.style.backgroundImage = `url('/images/${item.card}.png')`;

        // Add the count at the top left corner
        cardDiv.innerHTML = `
            <span class="card-count">${item.count}</span>
        `;

        box.appendChild(cardDiv);
    });
    selectedCards=[];
    // Add event listener for click events
    box.addEventListener('click', function(event) {
        const cardDiv = event.target.closest('.card');
        if (cardDiv) {
            const cardNumber = cardDiv.dataset.card;
            console.log("clicked cardsssssssssssssssssssssssssss")
            // Find the corresponding card in the cardList
            const cardObj = cardList.find(item => item.card == cardNumber);
            
            if (cardObj && cardObj.count > 0) {
                cardObj.count--;
                cardDiv.querySelector('.card-count').textContent = cardObj.count;
                selectedCards.push(cardObj.card);
                updateBottle();
                if (cardObj.count === 0) {
                    cardDiv.classList.add('disabled');  // Optional: Add a class to indicate no more cards
                }
            }
        }
    });
} else {
    console.error("Box element not found. Ensure there is an element with the ID 'box3' in your HTML.");
}


var t = document.getElementById('box1');
t.style.display="none"
document.addEventListener('DOMContentLoaded', function() {
    const cards = document.querySelectorAll('.cardchoice'); // Select all divs with class "card"

    cards.forEach(card => {
        card.addEventListener('click', function() {
            const selectedValue = this.getAttribute('data-value'); // Get the data-value attribute of the clicked card
            t.style.display="none"
                goal=selectedValue;
            console.log('Selected card:', selectedValue); // Log the selected card value
        });
    });
});









function fetchLieData(playerId) {


    
    var all=document.getElementsByClassName("button-put");
    if (all.length>0)
    {
        for(i =0;i<all.length;i++)
{
    all[i].remove();
}
           }
             var turn = document.getElementById("content");
        turn.style.border="30px solid #3d577f";   


    
    document.getElementById("button-lier").style.display="none";
    fetch(`/lie/${playerId}`)
        .then(response => response.json())  // Parse the JSON from the response
        .then(data => {
            console.log('Response:', data); // Log the response data for debugging

            // Check the desicon value
            if (data.desicon === 1) {

                document.getElementById('containerbutton').innerHTML=""


                playAudiowinround();
                displayImage();
                  var turn = document.getElementById("content");
                     turn.style.border="30px solid #75b798";   

                    var all=document.getElementsByClassName("button-lier");
                    if (all.length>0)
                    {
                        for(i =0;i<all.length;i++)
                {
                    all[i].remove();
                    console.log("buuton lir removed from the function fetchlie()");
                }
                        }

                alternput=0;
                    document.getElementById('box1').style.display = 'flex'; // Show the box1 div

                        // Create the parent container div named 'containerbutton'
                        // Check if a containerButton already exists
                        let containerButton = document.getElementById('containerbutton');

                        // If it doesn't exist, create it
                        if (!containerButton) {
                            containerButton = document.createElement('div');
                            containerButton.className = 'containerbutton';
                            containerButton.id = 'containerbutton';

                            // Append the new containerButton to the parent element
                            document.getElementById(parentId).appendChild(containerButton);
                        }

                        // Create a new div element (newDiv)
                        const newDiv = document.createElement('div');

                        // Set the class and id attributes for newDiv
                        newDiv.className = 'button-put';
                        newDiv.id = 'put';

                        // Set the onclick attribute to call the put() function
                        newDiv.setAttribute('onclick', 'put()');

                        // Create the <h6> element and set its text content
                        const h6Element = document.createElement('h6');
                        h6Element.textContent = 'put cards from box1';

                        // Append the <h6> element to the new div
                        newDiv.appendChild(h6Element);

                        // Append the newDiv to the containerDiv
                        containerButton.appendChild(newDiv);

                        // Append the containerDiv to the table (assumes 'table' element already exists in the DOM)
                        const table = document.getElementById('table');
                        if (table) {
                            table.appendChild(containerButton);
                        } else {
                            console.error("Table element with ID 'table' not found.");
                        }


                            
                    var all=document.getElementsByClassName("button-lier");
                    if (all.length>0)
                    {
                        for(i =0;i<all.length;i++)
                {
                    all[i].remove();
                }
                        }

            }
             if (data.desicon === 0)
             { 
document.getElementById('containerbutton').innerHTML=""



                        var all=document.getElementsByClassName("button-put");
                        if (all.length>0)
                        {
                            for(i =0;i<all.length;i++)
                    {
                        all[i].remove();
                        console.log("delete all put button if ");
                    }
                            }
                              var all=document.getElementsByClassName("button-lier");


                    if (all.length>0)
                    {
                        for(i =0;i<all.length;i++)
                        {
                        for(i =0;i<all.length;i++)
                {
                    all[i].remove();
                }
                        }
             }
              //  playAudioloseround();
                alternput=0;
                displayImageangry();

                fetch('/handupdate/' + playerId)
                 .then(response => response.json())
                 .then(data => {
                    const cardU = data.updatedhand;
                    const box3new = document.getElementById("box3");

// Clear the previous content of the box3 div
box3new.innerHTML = '';

// Initialize an object to count the occurrences of each card
const cardCount = {};
cards=cardU;
// Count the occurrences of each card
cards.forEach(card => {
    if (card in cardCount) {
        cardCount[card]++;
    } else {
        cardCount[card] = 1;
    }
});

// Convert the cardCount object into an array of objects
cardList = Object.keys(cardCount).map(key => {
    return { card: parseInt(key), count: cardCount[key] };
});
// Get the 'box3' div

// Clear the previous content of the 'box3' div
box.innerHTML = '';

// Iterate through the cardList array and create corresponding div elements
cardList.forEach(item => {
    // Create a new div element for each card
    const cardDiv = document.createElement("div");
    cardDiv.className = "card";
    cardDiv.setAttribute("data-card", item.card);

    // Set the background image using the card number
    cardDiv.style.backgroundImage = `url('/images/${item.card}.png')`;

    // Create a span element to show the card count
    const span = document.createElement("span");
    span.className = "card-count";
    span.innerText = item.count; // Display the occurrence count

    // Append the span to the card div
    cardDiv.appendChild(span);

    // Append the card div to the 'box3' div
    box.appendChild(cardDiv);
});
    })
    .catch(error => console.error('Error fetching hand update:', error));













             }
        })
        .catch(error => {
            console.error('Error:', error);
        });
}


alternput=1;

// Event listener for 'angel' event
const eventSourceAngel = new EventSource("{{ mercure('/broadcastangel') }}");
eventSourceAngel.onmessage = () => {
console.log("Angel event received");
//player  if from the data event 
 const data = JSON.parse(event.data);
 const angel1 = data.angel;
 console.log("angels"+angel1);


if({{playerIdt}}==angel1){
    playAudiowinround();
    document.getElementById('box1').style.display = "flex";
    createButton('table', 'button-put', 'put', 'put()', 'Put cards from box1');
    var all=document.getElementsByClassName("button-lier");
    if(length>0)
    {
    for(i =0;i<all.length;i++)
    {
        all[i].remove();
    }
            
    }           
var turn = document.getElementById("content");
turn.style.border="30px solid #75b798";  

}

//handel the animation :

// Get all elements with the class name 'avatar'
            var avatarElements = document.getElementsByClassName('avatar');

            // Iterate through each element and remove the 'highlight-transition' class if it exists
            for (var i = 0; i < avatarElements.length; i++) {
                if (avatarElements[i].classList.contains('highlight-transition')) {
                    avatarElements[i].classList.remove('highlight-transition');
                }
            }
        //search and move next player icon 
        
        var animatedRoundPlayer = document.getElementById(angel1);
        console.log("the active div is "+animatedRoundPlayer);
        if(animatedRoundPlayer)
        {
            console.log("the player with id ",angel1,"should be animated");

            animatedRoundPlayer.classList.add("highlight-transition");

        }



}

/*-------------------------------------------Event update broadcast------------------------*/

/*
// Event listener for 'angelBroadcast' event
const eventSourceAngel1 = new EventSource("{{ mercure('/broadcastangel') }}");
eventSourceAngel.onmessage = () => {

console.log("Angel Broadcast event received");

const data = JSON.parse(event.data);

const broadcastangel = data.broadcastangel;

console.log("broadcast event with Id : ",broadcastangel);

   

}*/
//--------------------------------------------------------------------------------------------






let winstate = {{ player.winner }};
//Event listener for 'table' event
const eventSourceTable = new EventSource("{{ mercure('/' ~ rommid ~ '/table') | escape('js') }}");
eventSourceTable.onmessage = event => {
    

    try {
        const data = JSON.parse(event.data);
        const cardsnumber = data.cardnumber;
        const container = document.getElementById('containerscard');

        container.innerHTML = '';

        for (let i = 0; i < cardsnumber; i++) {
            const cardDiv = document.createElement('div');
            cardDiv.className = 'cardtable';

            const img = document.createElement('img');
            img.src = '/images/lie.jpg';
            img.height = 100;

            cardDiv.appendChild(img);
            container.appendChild(cardDiv);
        }

        if (cardsnumber === 0) {
            container.innerHTML = '';
        }

        console.log("Number of cards on the table: " + cardsnumber);
    } catch (error) {
        console.error("Failed to process 'table' event:", error);
    }
};
// Reusable function to create and append buttons
function createButton(parentId, className, id, onClickFunction, buttonText) {
    // Check if a containerButton already exists
    let containerButton = document.getElementById('containerbutton');

    // If it doesn't exist, create it
    if (!containerButton) {
        containerButton = document.createElement('div');
        containerButton.className = 'containerbutton';
        containerButton.id = 'containerbutton';

        // Append the new containerButton to the parent element
        document.getElementById(parentId).appendChild(containerButton);
    }

    // Create the new div
    const newDiv = document.createElement('div');
    newDiv.className = className;
    newDiv.id = id;
    newDiv.setAttribute('onclick', onClickFunction);

    // Create the <h6> element and set its text content
    const h6Element = document.createElement('h6');
    h6Element.textContent = buttonText;

    // Append the <h6> element to the new div
    newDiv.appendChild(h6Element);

    // Append the new div to the containerButton
    containerButton.appendChild(newDiv);
}




// Event listener for 'goalUpdate' event
const eventSourceGoalUpdate = new EventSource("{{ mercure('/' ~ rommid ~ '/goalUpdate')|escape('js') }}");
eventSourceGoalUpdate.onmessage = event => {
    console.log("Goal update received");

    try {
        const goalUpdate = JSON.parse(event.data);
        const newGoal = goalUpdate.goalUpdate;

        document.getElementById("goalup").innerText = newGoal;
        document.getElementById("goalup").style.color = "white";
    } catch (error) {
        console.error("Failed to process 'goalUpdate' event:", error);
    }
};

// Event listener for 'loserplayer' event tlaa berrasmi ya7chi fih 
const eventSourceLoserPlayer = new EventSource("{{ mercure('/' ~ playerIdt ~ '/loserplayer')|escape('js') }}");
eventSourceLoserPlayer.onmessage = event => {
    console.log("Loser update received");
playAudioloseround()
    displayImageangry();
    

    try {
        const data = JSON.parse(event.data);
        const cards = data.update;

        const box3New = document.getElementById("box3");
        box3New.innerHTML = '';  // Clear previous content

        const cardCount = {};
        cards.forEach(card => {
            cardCount[card] = (cardCount[card] || 0) + 1;
        });

        cardList = Object.keys(cardCount).map(key => ({
            card: parseInt(key),
            count: cardCount[key]
        }));

        cardList.forEach(item => {
            const cardDiv = document.createElement("div");
            cardDiv.className = "card";
            cardDiv.setAttribute("data-card", item.card);
            cardDiv.style.backgroundImage = `url('/images/${item.card}.png')`;

            const span = document.createElement("span");
            span.className = "card-count";
            span.innerText = item.count;

            cardDiv.appendChild(span);
            box3New.appendChild(cardDiv);
        });
    } catch (error) {
        console.error("Failed to process 'loserplayer' event:", error);
    }
};
var perviousplayer=0;
// Event listener for 'putdone' event
//const eventSourcePutDone = new EventSource("{{ mercure('/' ~ rommid ~ '/putdone')|escape('js') }}");
//eventSourcePutDone.onmessage = event => {
  //  console.log("Put done update received");

   /* try {

        const data = JSON.parse(event.data);
        const currentPlayer = data.currentroundplayer;
        const activePlayer = data.nextplayer;
        console.log("the other player Id is "+activePlayer);
            actif=activePlayer;
        var cardnumberP=data.cardnumber;







        //do the player  animation
        if(activePlayer != playerId)
        {
       var other = document.getElementById(activePlayer);
       if(other)
       {
        document.getElementById(activePlayer).classList.add("highlight-transition");
            perviousplayer=activePlayer;
       }
        }else {
            if(perviousplayer!=0)
            {
            var div=document.getElementById(perviousplayer);
            if (div)
            {
                div.classList.remove("highlight-transition");
            }
            }
        }



        if (currentPlayer !== {{ player.id }} && winstate != 1 && activePlayer=={{ player.id }}) {
            

        var turn = document.getElementById("content");
        turn.style.border="30px solid #75b798";   

            createButton('table', 'button-lier', 'button-lier', `fetchLieData({{ player.id }})`, '');
                if (activePlayer === {{ player.id }} ) {
                    console.log("Your turn to play, mister " + activePlayer);
                    createButton('table', 'button-put', 'put', 'put()', 'Put cards');
                }
          
        }
    } catch (error) {
        console.error("Failed to process 'putdone' event:", error);
    }
//};
*/



// Event listener for 'win' event
const eventSourceWin = new EventSource("{{ mercure('/' ~ rommid ~ '/win')|escape('js') }}");
eventSourceWin.onmessage = event => {
    console.log("Win update received");

    try {
        const data = JSON.parse(event.data);
        const winningPlayerIds = data.winningPlayerIds;
        console.log(winningPlayerIds);
currentPlayer=currentPlayer-1;
console.log(currentPlayer);
        winningPlayerIds.forEach(playerId => {
            if ({{ player.id }} == playerId) {
                winstate = 1;
                            showWinEffect();

            }
            console.log('Winning Player ID:', playerId);
          const playerElement = document.getElementById(playerId);
            console.log("this is the player html element "+playerElement+"its id is +"+ playerId)
            if (playerElement) {
                const newParagraph = document.createElement("p");
                newParagraph.textContent = "🎉🎉";
                newParagraph.style.position = "absolute";
                newParagraph.style.top = "-10px";
                newParagraph.style.left = "10px";
                playerElement.appendChild(newParagraph);
            }
        });

//last winner player 

var lastPlayerWin =winningPlayerIds[winningPlayerIds.length -1];
    //inform all the players of the winnig player 
    var win_avatar = document.getElementById(lastPlayerWin);
            console.log("the inshure "+win_avatar);

    if (win_avatar) 
    {console.log("the sure"+lastPlayerWin)
        win_avatar.style.backgroundColor ="yellow";
        console.log("the sure is "+win_avatar);



    }

    } catch (error) {
        console.error("Failed to process 'win' event:", error);
    }
};




{% if winningPlayerIds is not empty %}

        const winningPlayerIds = {{ winningPlayerIds|json_encode|raw }};
        winningPlayerIds.forEach(playerId => {
            console.log("enter to winning loop");
            const playerElement = document.getElementById(playerId);
            console.log("this is the player html element "+playerElement+"its id is +"+ playerId)
            if (playerElement) {
                const newParagraph = document.createElement("p");
                newParagraph.textContent = "🎉🎉";
                newParagraph.style.position = "absolute";
                newParagraph.style.top = "-10px";
                newParagraph.style.left = "10px";
                playerElement.appendChild(newParagraph);
            }
        });
{% endif %}



function playAudio() {
    const audio = document.getElementById('myAudio');
    audio.play();
}

function playAudiowinround() {
    const audio = document.getElementById('win-round');
    audio.play();
}

function playAudioloseround() {
    const audio = document.getElementById('lose-round');
    audio.play();
}
{%  endif  %}
</script>


